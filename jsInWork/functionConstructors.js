'use strict';

// Функции-конструкторы
// https://learn.javascript.ru/constructor-new - документация

// const num = new Number(3);
// console.log(num); // [Number: 3]

// const num = new Function(3); // Если такая функция будет содержать методы и свойства, то она создаст нам объект,
// то есть созданием новой функции, мы создаем новый объект, свойства которой прописаны в этой функции
// console.log(num); // [Function: anonymous]

function User (name, id) { // Имя функции-конструктора должно начинаться с большой буквы. - такое соглашение
    this.name = name;
    this.id = id;
    this.human = true;
    this.hello = function () {
        console.log(`Hello ${this.name}`);
    };
} // Когда мы использовали такой синтаксис, наша функция стала конструктором
// Предназначены для конструирования объектов

const ivan = new User('Ivan', 28); // Функция-конструктор должна выполняться только с помощью оператора "new". - такое соглашение
const alex = new User('Alex', 20);

console.log(ivan); // { name: 'Ivan', id: 28, human: true }
console.log(alex); // { name: 'Alex', id: 20, human: true }

ivan.hello(); // Hello Ivan
alex.hello(); // Hello Alex

// Есть свойство prototype, это нужно, когда у нас нет доступа к нашему прототипу, или мы не можем его как-то менять, но нам нужно его модифицировать
User.prototype.exit = function () {
    console.log(`Пользователь ${this.name} ушел`);
}; // У нас прототипно будет наследоваться этот медот и он появится у потомков, которые были объявлены после него

const ann = new User('Ann', 20);

ann.exit(); // Пользователь Ann ушел

// Конструкторы необходимы для создания новых однотипных объектов: новые пользователи сайта, товары в магазинах, ролики на ютубе, везде, где есть шаблонизация
// Даже компоненты сайтов могут создаваться таким образом
// Это стандарт ES5, то как на самом деле происходит под капотом js
// В ES6 появились классы, это красивая обертка вот этого всего функционала, классы удобнее использовать
