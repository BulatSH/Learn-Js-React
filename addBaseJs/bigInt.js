'use strict';

// BigInt

// console.log(Number.MAX_SAFE_INTEGER); // 9007199254740991 2**53-1 максимальное число, с которым js умеет нормально правильно работать,
// если нужно использовать число больше, то нужно применять такой тип данных, как BigInt, чтобы избежать ошибок при работе с большими числами

// const bigint = 12132131321313213213131321n; // Если в конце добавляем букву n - он становится другим типом данных BigInt

// const sameBigint = BigInt(12132131321313213213131321); // Можно и так, эта команда может принимать строки и конвертировать их в большое число

// console.log(typeof(bigint)); // bigint

// У bigint есть свои особенности
// Его нельзя использовать с методами встроенного объекта Math
// Нельзя смешивать в операциях bigint и обычные числа

// console.log(5n + 1); // Cannot mix BigInt and other types, use explicit conversions
// console.log(Math.round(5n)); // Cannot convert a BigInt value to a number

// console.log(1n + 2n); // 3n

// Операторы
// С bigint можно адекватно использовать сложение, умножение, вычитание, возведение в степень и деление с остатком
// Чуть сложнее с делением
// console.log(5n / 2n); // Получаем 2n, операция деления всегда возвращается без дробной части
// С этим типом данных у нас будут работать и побитовые операторы
// Операторы сравнения тоже будут нормально работать
// console.log(2n > 1n); // true
// Кстати, если сравниваем bigint c обычным числом, то тоже будет возвращаться true, сравнение нормально работает, также будут равны при нестрогом сравнении
// console.log(2n > 1); // true
// console.log(2n > 5); // false

// console.log(2n == 2); // true
// console.log(2n === 2); // false

// Если понадбится сложить BigInt с обычным числом, нужно явно конвертировать типы данных

let bigint = 1n;
let number = 2;

console.log(bigint + BigInt(number)); // 3n
console.log(Number(bigint) + number); // 3
// console.log(+bigint + number); // Cannot convert a BigInt value to a number, унарный плюс не сконвертирует BigInt в Number, это не предусмотрено разработчиками

// Если мы попытаемся сконвертировать большой BigInt в Number, то сконвертируется только часть, которая вмещается в (9007199254740991 2**53-1 максимальное число),
// остальная часть будет отброшена

// Лучше BigInt использовать только тогда, когда это действительно необходимо
