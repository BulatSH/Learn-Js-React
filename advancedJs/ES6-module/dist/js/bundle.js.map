{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACe;AACf;AACA;AACe;AACf;AACA;AACA;;;;;;;UCdA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA,YAAY,WAAW;AACvB;AACA,kBAAkB,KAAK,MAAM,IAAI;AACjC;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU,MAAM,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AAC9B;AACA,oDAAK,IAAI","sources":["webpack:///./src/js/main.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/js/script.js"],"sourcesContent":["// Модули появились и в ES6 стандарте и она более гибкая\r\n\r\n// Можно так\r\nexport let one = 1;\r\n\r\n// И так, так называемый именованый синтаксис\r\nlet two = 2;\r\n\r\nexport { two };\r\n\r\n// default - экспорт по умолчанию\r\nexport default function sayHi() {\r\n\tconsole.log('Hello');\r\n}\r\n// Самое главное в экспорте - это, чтобы у каждой сущности было имя\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Деструктуризация\r\n// import { one, two } from \"./main\";\r\n\r\n// console.log(`${one} and ${two}`);\r\n// К сожалению, браузер не умеет собирать все это в один рабочий скрип, и нам все равно нужно воспользоваться сборщиком\r\n\r\n// Мы также можем сразу переименовать то, что импортируем\r\n// import { one as first } from \"./main\";\r\n\r\n// console.log(first);\r\n\r\n// Можем испортировать все\r\n// import * as data from './main';\r\n\r\n// console.log(`${data.one} and ${data.two}`);\r\n\r\n// data.sayHi();\r\n\r\n// Импорт default\r\n// import sayHi from './main';\r\n// Выглядит так - import {default as sayHi} from './main';\r\n\r\n// sayHi();\r\n\r\n// Есть еще одна фича, это атрибут type module, который работает практически также, как и атрибут def, то есть подключаться будет по очереди\r\n// Нужно подключать все скрипты по порядку, вначале те, в которых есть экспорт, потом те, в которых есть импорт\r\n// Это не значит, что браузер соберет все в один файл, он этого не умеет делать,\r\n// он просто последовательно будет подключать эти файлы использую import и export\r\n// Также мы должны правильно прописывать пути к нашему файлу\r\nimport sayHi from './main.js';\r\n\r\nsayHi(); // Hello в браузере\r\n"],"names":[],"sourceRoot":""}