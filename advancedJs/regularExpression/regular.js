'use strict';

// Регулярные выражения
// Состоят из двух частей
// 1. Патерн - шаблон. Шаблон того, что мы ищем, или пытаемся удалить и т.п
// 2. Флаги

// 1 вариант создания регулярного выражения (Regular Expression), конструктор
// new RegExp('pattern', 'flags'); // Устарел, есть более короткий синтаксис

// 2 вариант
// /pattern/f

// const ans = 'Ann';

// const reg = /n/;

// Ищем по регулярному выражению reg
// console.log(ans.search(reg)); // Ann -> Вернет позицию, по которой мы нашли результат, то есть 1
// Если в строке не будет n, то мы получим -1

// Флаги
// i - вне зависимости от регистра
// const reg = /n/i;
// g - global, пытаемся найти сразу несколько вхождений
// const reg = /n/g; - с методом search не сработает
// m - многострочный режим
// Комбинация. Можно так const reg = /n/igm; или так const reg = /n/gmi; - неважно

// const reg = /n/i;
// console.log(ans.match(reg)); // [ 'n', index: 1, input: 'Ann', groups: undefined ]

// const reg = /n/ig;
// console.log(ans.match(reg)); // [ 'n', 'n' ]

// const pass = 'pass....';
// Метод замены, принимает два аргумента, что мы заменяем и на что
// /./g - точка означает, что мы берем все символы строки
// console.log(pass.replace(/./g, '*')); // ********
// Если мы хотим взять только отдельную точку, то можем экранировать этот символ /\./g
// console.log(pass.replace(/\./g, '*')); // pass****
// У регулярных выражений много спецсимволов, если хотим искать их как отдельный символ,
// например: /\\/g, /\^/g и т.д

// console.log('12-34-56'.replace(/-/g, ':')); // 12:34:56

// Это все были методы строк, но у регулярных выражений есть и свои методы
// const test = /n/ig;
// Проверяет, если внутри строки, которя передается в метод тест, что-то похожее на этот паттерн /n/ig
// console.log(test.test(test)); // true

// Иногда мы хотим искать целый класс символов, например: слова, пробелы, цифры
// Для этого у регулярных выржаений есть такое понятие как классы
// 1. \d - ищем цифры
// 2. \w - все слова, буквы
// 3. \s - все пробелы
// const num = '10';
// const reg = /\d/;
// console.log(num.match(reg)); // [ '1', index: 0, input: '10', groups: undefined ]

const str = 'My name is R2D2';
// Можно комбинировать
console.log(str.match(/\w\d\w\d/i)); // ['R2D2', index: 11, input: 'My name is R2D2', groups: undefined]

// Также есть такое понятие, как обратные классы
// 1. \D - не числа
// 1. \W - не буквы
// 1. \S - не пробелы
