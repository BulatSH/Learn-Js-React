{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,0BAA0B;AAC1B,CAAC;AACD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UChDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,iBAAiB,mBAAO,CAAC,gCAAQ,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./src/js/main.js","webpack:///webpack/bootstrap","webpack:///./src/js/script.js"],"sourcesContent":["const app = '123'; // в браузере Uncaught SyntaxError: redeclaration of const app\r\n// т.к. переменная app уже объявлена в другом js файле\r\n\r\n// Рассмотрим 2 способа создания модулей\r\n\r\n// 1. Анонимная самовызывающаяся функция\r\n\r\nconst number = 1; // Записываем в глобальную область видимости\r\n\r\n// Анонимная самовызывающаяся функция\r\n// Без скобок-обертки, это будет функция dexlaration - она не может быть анонимной\r\n// Поэтому таким образом мы ее делаем функцией expression\r\n// Создаем локальную область видимости\r\n(function () {\r\n\tlet number = 2;\r\n\tconsole.log(number); // 2\r\n\r\n\tconsole.log(number + 3); // 5\r\n}());\r\n\r\nconsole.log(number); // 1\r\n\r\n// 2. Использование объектного интерфейса\r\n// Модуль записывам в переменную и в нее возвращаем методы доступные снаружи\r\nconst user = (function () {\r\n\tconst private = function () {\r\n\t\tconsole.log('I am private');\r\n\t};\r\n\r\n\treturn {\r\n\t\t// Экспортируем только те методы, которые нам будут нужны снаружи\r\n\t\tsayHello: private\r\n\t};\r\n}());\r\n\r\nuser.sayHello();\r\n\r\n// Синтаксис command js\r\nfunction myModule() {\r\n\tthis.hello = function () {\r\n\t\tconsole.log('hello');\r\n\t};\r\n\r\n\tthis.goodbye = function () {\r\n\t\tconsole.log('bye');\r\n\t}\r\n}\r\n\r\nmodule.exports = myModule;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const myModule = require('./main'); // Для работы нужен сборщик, например webpack\r\n// Разница между webpack и gulp\r\n// Галп - планировщик задач\r\n// Webpack - сборщик модулей\r\n\r\nconst app = 'data';\r\n\r\nconst myModuleInstance = new myModule();\r\n\r\nmyModuleInstance.hello();\r\nmyModuleInstance.goodbye();\r\n\r\n// Подключим webpack\r\n// у него есть 2 режима работы\r\n// 1. Использование стандартных заводских настроек\r\n// Главное условие, чтобы webpack сработал без конфига -\r\n// это то, что главный файл, который принимает в себя все импорты\r\n// должен называться index.js, и он должен находиться в папке src\r\n// 2. Наши настройки, когда мы сами прописываем свой config файл\r\n"],"names":[],"sourceRoot":""}