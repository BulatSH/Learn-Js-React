// Замыкание и лексическое окружение // Lexical Environment https://learn.javascript.ru/closure
// Лексическое окружение - это технический объект
// Объект лексического окружения состоит из двух частей:
// Environment Record – объект, в котором как свойства хранятся все локальные переменные (а также некоторая другая информация, такая как значение this).
// Ссылка на внешнее лексическое окружение – то есть то, которое соответствует коду снаружи (снаружи от текущих фигурных скобок).
// "Переменная" – это просто свойство специального внутреннего объекта: Environment Record.
// «Получить или изменить переменную», означает, «получить или изменить свойство этого объекта».

// Любая переменная - это свойство объекта лексического окружения
// Лексическое окружение существует у любого блока кода
// Каждый вызов функции - это создание нового лексического окружения, и его уничтожение, после выполнения функции
// Замыкание - это функция, которая запоминает свои внешние переменные, и может получить к ним доступ

// Каким образом функция знает, что ей брать и помещать в свое лексическое окружение?
// Enviroment - скрытое свойство, которое ссылается на лексическое окуржение места, где эта функция была создана

'use strict';

// let number = 5; debugger

// function logNumber () {
//     // Внутреннее лексическое окружение
//     let number = 4; debugger
//     console.log(number);
// }

// // Внешнее лексическое окружение
// number = 6;

// logNumber(); debugger

function createCounter () { // Function Declaration
    let counter = 0;

    const myFunction = function () { // Function Expression
        counter = counter + 1;

        return counter;
    };

    return myFunction;
}

const increment = createCounter();

const c1 = increment();
const c2 = increment();
const c3 = increment();

console.log(c1, c2, c3);

// Есть еще Named Function Expression - функция Function Expression с именем
// let sayHi = function func(who) {};
// Оно позволяет функции ссылаться на себя же.
// Оно не доступно за пределами функции.
